import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { 
  Bug, 
  Search, 
  AlertTriangle, 
  Shield, 
  CheckCircle, 
  Clock,
  Database,
  Code,
  Globe,
  FileText
} from "lucide-react";

interface Vulnerability {
  id: string;
  type: string;
  severity: "Low" | "Medium" | "High" | "Critical";
  description: string;
  location: string;
  recommendation: string;
  cve?: string;
}

interface ScanResult {
  url: string;
  vulnerabilities: Vulnerability[];
  scanTime: number;
  totalChecks: number;
}

const VulnerabilityScanner = () => {
  const [targetUrl, setTargetUrl] = useState("");
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [currentCheck, setCurrentCheck] = useState("");
  const { toast } = useToast();

  // Simulated vulnerability database for educational purposes
  const simulatedVulnerabilities: Vulnerability[] = [
    {
      id: "sql-1",
      type: "SQL Injection",
      severity: "High",
      description: "Potential SQL injection vulnerability detected in login form",
      location: "/login?user=admin",
      recommendation: "Use parameterized queries and input validation",
      cve: "CWE-89"
    },
    {
      id: "xss-1",
      type: "Cross-Site Scripting (XSS)",
      severity: "Medium",
      description: "Reflected XSS vulnerability in search parameter",
      location: "/search?q=<script>",
      recommendation: "Implement proper input sanitization and output encoding",
      cve: "CWE-79"
    },
    {
      id: "csrf-1",
      type: "CSRF",
      severity: "Medium",
      description: "Missing CSRF protection on form submission",
      location: "/admin/settings",
      recommendation: "Implement CSRF tokens for all state-changing operations",
      cve: "CWE-352"
    },
    {
      id: "ssl-1",
      type: "SSL/TLS Configuration",
      severity: "Low",
      description: "Weak SSL/TLS cipher suites detected",
      location: "SSL Configuration",
      recommendation: "Update SSL/TLS configuration to use strong cipher suites",
      cve: "CWE-326"
    },
    {
      id: "dir-1",
      type: "Directory Traversal",
      severity: "Critical",
      description: "Directory traversal vulnerability allows file system access",
      location: "/files?path=../../../etc/passwd",
      recommendation: "Validate and sanitize file path inputs",
      cve: "CWE-22"
    },
    {
      id: "info-1",
      type: "Information Disclosure",
      severity: "Low",
      description: "Server version information disclosed in headers",
      location: "HTTP Headers",
      recommendation: "Configure server to hide version information",
      cve: "CWE-200"
    }
  ];

  const scanChecks = [
    "Checking SSL/TLS configuration...",
    "Testing for SQL injection vulnerabilities...",
    "Scanning for XSS vulnerabilities...",
    "Checking CSRF protection...",
    "Testing directory traversal...",
    "Analyzing HTTP headers...",
    "Checking for information disclosure...",
    "Testing authentication bypass...",
    "Scanning for known CVEs...",
    "Finalizing security assessment..."
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "destructive";
      case "High": return "destructive";
      case "Medium": return "warning";
      case "Low": return "secondary";
      default: return "secondary";
    }
  };

  const startScan = async () => {
    if (!targetUrl) {
      toast({
        title: "Error",
        description: "Please enter a target URL",
        variant: "destructive"
      });
      return;
    }

    if (!targetUrl.startsWith("http")) {
      toast({
        title: "Error",
        description: "Please enter a valid URL (starting with http:// or https://)",
        variant: "destructive"
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setScanResult(null);
    setCurrentCheck("");

    const startTime = Date.now();

    // Simulate vulnerability scanning
    for (let i = 0; i < scanChecks.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 300));
      setCurrentCheck(scanChecks[i]);
      setProgress(((i + 1) / scanChecks.length) * 100);
    }

    const endTime = Date.now();
    
    // Simulate finding vulnerabilities (random selection for educational purposes)
    const foundVulnerabilities = simulatedVulnerabilities
      .filter(() => Math.random() > 0.4) // 60% chance to find each vulnerability
      .map(vuln => ({
        ...vuln,
        location: vuln.location.replace(/\/\w+/, () => 
          "/" + targetUrl.split('/').pop()?.split('.')[0] || "page"
        )
      }));

    setScanResult({
      url: targetUrl,
      vulnerabilities: foundVulnerabilities,
      scanTime: endTime - startTime,
      totalChecks: scanChecks.length
    });

    setIsScanning(false);
    setCurrentCheck("");

    toast({
      title: "Scan Complete",
      description: `Found ${foundVulnerabilities.length} potential vulnerabilities`,
    });
  };

  const exportReport = () => {
    if (!scanResult) return;

    const report = {
      scan_date: new Date().toISOString(),
      target_url: scanResult.url,
      scan_duration: scanResult.scanTime,
      total_checks: scanResult.totalChecks,
      vulnerabilities_found: scanResult.vulnerabilities.length,
      vulnerabilities: scanResult.vulnerabilities
    };

    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-report-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Scanner Interface */}
      <Card className="terminal-effect">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="h-5 w-5 text-primary" />
            Vulnerability Scanner
          </CardTitle>
          <CardDescription>
            Scan websites for common security vulnerabilities (Educational Simulation)
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="target-url">Target URL</Label>
            <Input
              id="target-url"
              type="url"
              value={targetUrl}
              onChange={(e) => setTargetUrl(e.target.value)}
              placeholder="https://example.com"
              disabled={isScanning}
            />
          </div>

          <Button 
            onClick={startScan} 
            disabled={isScanning || !targetUrl}
            className="w-full cyber-glow"
          >
            {isScanning ? (
              <>
                <Search className="h-4 w-4 mr-2 animate-spin" />
                Scanning...
              </>
            ) : (
              <>
                <Bug className="h-4 w-4 mr-2" />
                Start Vulnerability Scan
              </>
            )}
          </Button>

          {isScanning && (
            <div className="space-y-3">
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Scan Progress</span>
                  <span>{progress.toFixed(0)}%</span>
                </div>
                <Progress value={progress} className="h-2" />
              </div>
              
              {currentCheck && (
                <div className="text-sm text-muted-foreground font-mono">
                  {currentCheck}
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Scan Results */}
      {scanResult && (
        <div className="space-y-6">
          {/* Summary */}
          <Card className="terminal-effect">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-secondary" />
                Scan Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-primary">
                    {scanResult.vulnerabilities.length}
                  </div>
                  <div className="text-sm text-muted-foreground">Vulnerabilities</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-secondary">
                    {(scanResult.scanTime / 1000).toFixed(1)}s
                  </div>
                  <div className="text-sm text-muted-foreground">Scan Time</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-accent">
                    {scanResult.totalChecks}
                  </div>
                  <div className="text-sm text-muted-foreground">Checks</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-warning">
                    {scanResult.vulnerabilities.filter(v => v.severity === "Critical" || v.severity === "High").length}
                  </div>
                  <div className="text-sm text-muted-foreground">High Risk</div>
                </div>
              </div>

              <Button onClick={exportReport} variant="outline" className="w-full mt-4">
                <FileText className="h-4 w-4 mr-2" />
                Export Report
              </Button>
            </CardContent>
          </Card>

          {/* Vulnerabilities List */}
          <Card className="terminal-effect">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-warning" />
                Vulnerabilities Found
              </CardTitle>
            </CardHeader>
            <CardContent>
              {scanResult.vulnerabilities.length === 0 ? (
                <div className="text-center py-8">
                  <CheckCircle className="h-12 w-12 text-primary mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-primary">No Vulnerabilities Found</h3>
                  <p className="text-muted-foreground">The target appears to be secure based on our scans.</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {scanResult.vulnerabilities.map((vuln) => (
                    <Card key={vuln.id} className="border-l-4 border-l-warning">
                      <CardContent className="p-4">
                        <div className="flex justify-between items-start mb-2">
                          <h4 className="font-semibold">{vuln.type}</h4>
                          <Badge variant={getSeverityColor(vuln.severity) as any}>
                            {vuln.severity}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground mb-2">{vuln.description}</p>
                        <div className="space-y-1 text-xs">
                          <div><strong>Location:</strong> {vuln.location}</div>
                          {vuln.cve && <div><strong>CVE:</strong> {vuln.cve}</div>}
                        </div>
                        <div className="mt-3 p-3 bg-muted/20 rounded">
                          <strong className="text-xs">Recommendation:</strong>
                          <p className="text-xs mt-1">{vuln.recommendation}</p>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Educational Content */}
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="types">Vulnerability Types</TabsTrigger>
          <TabsTrigger value="tools">Scanner Tools</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <Card className="terminal-effect">
            <CardHeader>
              <CardTitle>Vulnerability Scanning Overview</CardTitle>
            </CardHeader>
            <CardContent className="prose prose-invert max-w-none">
              <p>Vulnerability scanning is an automated process of proactively identifying security weaknesses in networks, systems, and applications.</p>
              
              <h4>Benefits of Regular Scanning:</h4>
              <ul>
                <li>Early detection of security flaws</li>
                <li>Compliance with security standards</li>
                <li>Risk assessment and prioritization</li>
                <li>Continuous security monitoring</li>
              </ul>

              <h4>Scan Types:</h4>
              <ul>
                <li><strong>Network Scans:</strong> Identify open ports and services</li>
                <li><strong>Web Application Scans:</strong> Test for OWASP Top 10 vulnerabilities</li>
                <li><strong>Database Scans:</strong> Check for misconfigurations and weak passwords</li>
                <li><strong>Configuration Scans:</strong> Verify security settings</li>
              </ul>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="types" className="space-y-4">
          <div className="grid gap-4">
            <Card className="terminal-effect">
              <CardHeader>
                <CardTitle className="text-destructive">Critical & High Severity</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <h4 className="font-semibold text-destructive">SQL Injection</h4>
                  <p className="text-sm text-muted-foreground">Allows attackers to execute malicious SQL commands</p>
                </div>
                <div>
                  <h4 className="font-semibold text-destructive">Directory Traversal</h4>
                  <p className="text-sm text-muted-foreground">Access files outside intended directory structure</p>
                </div>
                <div>
                  <h4 className="font-semibold text-destructive">Remote Code Execution</h4>
                  <p className="text-sm text-muted-foreground">Execute arbitrary code on target system</p>
                </div>
              </CardContent>
            </Card>

            <Card className="terminal-effect">
              <CardHeader>
                <CardTitle className="text-warning">Medium Severity</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <h4 className="font-semibold text-warning">Cross-Site Scripting (XSS)</h4>
                  <p className="text-sm text-muted-foreground">Inject malicious scripts into web pages</p>
                </div>
                <div>
                  <h4 className="font-semibold text-warning">CSRF</h4>
                  <p className="text-sm text-muted-foreground">Force users to perform unintended actions</p>
                </div>
                <div>
                  <h4 className="font-semibold text-warning">Insecure Authentication</h4>
                  <p className="text-sm text-muted-foreground">Weak login mechanisms and session management</p>
                </div>
              </CardContent>
            </Card>

            <Card className="terminal-effect">
              <CardHeader>
                <CardTitle className="text-secondary">Low Severity</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <h4 className="font-semibold text-secondary">Information Disclosure</h4>
                  <p className="text-sm text-muted-foreground">Revealing sensitive system information</p>
                </div>
                <div>
                  <h4 className="font-semibold text-secondary">Weak SSL/TLS</h4>
                  <p className="text-sm text-muted-foreground">Outdated encryption protocols</p>
                </div>
                <div>
                  <h4 className="font-semibold text-secondary">Missing Security Headers</h4>
                  <p className="text-sm text-muted-foreground">Lack of protective HTTP headers</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="tools" className="space-y-4">
          <Card className="terminal-effect">
            <CardHeader>
              <CardTitle>Popular Vulnerability Scanners</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-4">
                <div className="flex items-start gap-3">
                  <Bug className="h-5 w-5 text-primary mt-1" />
                  <div>
                    <h4 className="font-semibold">OWASP ZAP</h4>
                    <p className="text-sm text-muted-foreground">Free web application security scanner</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <Shield className="h-5 w-5 text-secondary mt-1" />
                  <div>
                    <h4 className="font-semibold">Nessus</h4>
                    <p className="text-sm text-muted-foreground">Comprehensive vulnerability assessment</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <Code className="h-5 w-5 text-accent mt-1" />
                  <div>
                    <h4 className="font-semibold">Nmap</h4>
                    <p className="text-sm text-muted-foreground">Network discovery and security auditing</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <Globe className="h-5 w-5 text-warning mt-1" />
                  <div>
                    <h4 className="font-semibold">Burp Suite</h4>
                    <p className="text-sm text-muted-foreground">Web application security testing platform</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default VulnerabilityScanner;